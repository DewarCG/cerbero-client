// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cerbero

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UsersPage, error)
	GetAllRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RolesResult, error)
	GetUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error)
	GetRole(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Role, error)
	FindUsersByRoles(ctx context.Context, in *UserInput, opts ...grpc.CallOption) (*UsersPage, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UsersPage, error) {
	out := new(UsersPage)
	err := c.cc.Invoke(ctx, "/Query/getAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RolesResult, error) {
	out := new(RolesResult)
	err := c.cc.Invoke(ctx, "/Query/getAllRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Query/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRole(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/Query/getRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FindUsersByRoles(ctx context.Context, in *UserInput, opts ...grpc.CallOption) (*UsersPage, error) {
	out := new(UsersPage)
	err := c.cc.Invoke(ctx, "/Query/findUsersByRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	GetAllUsers(context.Context, *emptypb.Empty) (*UsersPage, error)
	GetAllRoles(context.Context, *emptypb.Empty) (*RolesResult, error)
	GetUser(context.Context, *ID) (*User, error)
	GetRole(context.Context, *ID) (*Role, error)
	FindUsersByRoles(context.Context, *UserInput) (*UsersPage, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) GetAllUsers(context.Context, *emptypb.Empty) (*UsersPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedQueryServer) GetAllRoles(context.Context, *emptypb.Empty) (*RolesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (UnimplementedQueryServer) GetUser(context.Context, *ID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedQueryServer) GetRole(context.Context, *ID) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedQueryServer) FindUsersByRoles(context.Context, *UserInput) (*UsersPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsersByRoles not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/getAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/getAllRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllRoles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/getUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/getRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRole(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FindUsersByRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FindUsersByRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/findUsersByRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FindUsersByRoles(ctx, req.(*UserInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAllUsers",
			Handler:    _Query_GetAllUsers_Handler,
		},
		{
			MethodName: "getAllRoles",
			Handler:    _Query_GetAllRoles_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _Query_GetUser_Handler,
		},
		{
			MethodName: "getRole",
			Handler:    _Query_GetRole_Handler,
		},
		{
			MethodName: "findUsersByRoles",
			Handler:    _Query_FindUsersByRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cerbero.proto",
}

// MutationClient is the client API for Mutation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutationClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*UserSession, error)
	CreateUser(ctx context.Context, in *UserInput, opts ...grpc.CallOption) (*ID, error)
	CreateRole(ctx context.Context, in *RoleInput, opts ...grpc.CallOption) (*BoolType, error)
	LinkRolesToUsers(ctx context.Context, in *UserRolesUpdate, opts ...grpc.CallOption) (*BoolType, error)
	UnlinkRolesFromUsers(ctx context.Context, in *UserRolesUpdate, opts ...grpc.CallOption) (*BoolType, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*BoolType, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*BoolType, error)
	DeleteUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*BoolType, error)
	DeleteRole(ctx context.Context, in *ID, opts ...grpc.CallOption) (*BoolType, error)
}

type mutationClient struct {
	cc grpc.ClientConnInterface
}

func NewMutationClient(cc grpc.ClientConnInterface) MutationClient {
	return &mutationClient{cc}
}

func (c *mutationClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/Mutation/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*UserSession, error) {
	out := new(UserSession)
	err := c.cc.Invoke(ctx, "/Mutation/authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationClient) CreateUser(ctx context.Context, in *UserInput, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/Mutation/createUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationClient) CreateRole(ctx context.Context, in *RoleInput, opts ...grpc.CallOption) (*BoolType, error) {
	out := new(BoolType)
	err := c.cc.Invoke(ctx, "/Mutation/createRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationClient) LinkRolesToUsers(ctx context.Context, in *UserRolesUpdate, opts ...grpc.CallOption) (*BoolType, error) {
	out := new(BoolType)
	err := c.cc.Invoke(ctx, "/Mutation/linkRolesToUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationClient) UnlinkRolesFromUsers(ctx context.Context, in *UserRolesUpdate, opts ...grpc.CallOption) (*BoolType, error) {
	out := new(BoolType)
	err := c.cc.Invoke(ctx, "/Mutation/unlinkRolesFromUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*BoolType, error) {
	out := new(BoolType)
	err := c.cc.Invoke(ctx, "/Mutation/updateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*BoolType, error) {
	out := new(BoolType)
	err := c.cc.Invoke(ctx, "/Mutation/updateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationClient) DeleteUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*BoolType, error) {
	out := new(BoolType)
	err := c.cc.Invoke(ctx, "/Mutation/deleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationClient) DeleteRole(ctx context.Context, in *ID, opts ...grpc.CallOption) (*BoolType, error) {
	out := new(BoolType)
	err := c.cc.Invoke(ctx, "/Mutation/deleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MutationServer is the server API for Mutation service.
// All implementations must embed UnimplementedMutationServer
// for forward compatibility
type MutationServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Authenticate(context.Context, *AuthenticateRequest) (*UserSession, error)
	CreateUser(context.Context, *UserInput) (*ID, error)
	CreateRole(context.Context, *RoleInput) (*BoolType, error)
	LinkRolesToUsers(context.Context, *UserRolesUpdate) (*BoolType, error)
	UnlinkRolesFromUsers(context.Context, *UserRolesUpdate) (*BoolType, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*BoolType, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*BoolType, error)
	DeleteUser(context.Context, *ID) (*BoolType, error)
	DeleteRole(context.Context, *ID) (*BoolType, error)
	mustEmbedUnimplementedMutationServer()
}

// UnimplementedMutationServer must be embedded to have forward compatible implementations.
type UnimplementedMutationServer struct {
}

func (UnimplementedMutationServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMutationServer) Authenticate(context.Context, *AuthenticateRequest) (*UserSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedMutationServer) CreateUser(context.Context, *UserInput) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMutationServer) CreateRole(context.Context, *RoleInput) (*BoolType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedMutationServer) LinkRolesToUsers(context.Context, *UserRolesUpdate) (*BoolType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkRolesToUsers not implemented")
}
func (UnimplementedMutationServer) UnlinkRolesFromUsers(context.Context, *UserRolesUpdate) (*BoolType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkRolesFromUsers not implemented")
}
func (UnimplementedMutationServer) UpdateUser(context.Context, *UpdateUserRequest) (*BoolType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedMutationServer) UpdateRole(context.Context, *UpdateRoleRequest) (*BoolType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedMutationServer) DeleteUser(context.Context, *ID) (*BoolType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedMutationServer) DeleteRole(context.Context, *ID) (*BoolType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedMutationServer) mustEmbedUnimplementedMutationServer() {}

// UnsafeMutationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutationServer will
// result in compilation errors.
type UnsafeMutationServer interface {
	mustEmbedUnimplementedMutationServer()
}

func RegisterMutationServer(s grpc.ServiceRegistrar, srv MutationServer) {
	s.RegisterService(&Mutation_ServiceDesc, srv)
}

func _Mutation_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mutation/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mutation_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mutation/authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mutation_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mutation/createUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServer).CreateUser(ctx, req.(*UserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mutation_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mutation/createRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServer).CreateRole(ctx, req.(*RoleInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mutation_LinkRolesToUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRolesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServer).LinkRolesToUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mutation/linkRolesToUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServer).LinkRolesToUsers(ctx, req.(*UserRolesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mutation_UnlinkRolesFromUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRolesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServer).UnlinkRolesFromUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mutation/unlinkRolesFromUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServer).UnlinkRolesFromUsers(ctx, req.(*UserRolesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mutation_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mutation/updateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mutation_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mutation/updateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mutation_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mutation/deleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServer).DeleteUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mutation_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mutation/deleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServer).DeleteRole(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// Mutation_ServiceDesc is the grpc.ServiceDesc for Mutation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mutation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mutation",
	HandlerType: (*MutationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _Mutation_Login_Handler,
		},
		{
			MethodName: "authenticate",
			Handler:    _Mutation_Authenticate_Handler,
		},
		{
			MethodName: "createUser",
			Handler:    _Mutation_CreateUser_Handler,
		},
		{
			MethodName: "createRole",
			Handler:    _Mutation_CreateRole_Handler,
		},
		{
			MethodName: "linkRolesToUsers",
			Handler:    _Mutation_LinkRolesToUsers_Handler,
		},
		{
			MethodName: "unlinkRolesFromUsers",
			Handler:    _Mutation_UnlinkRolesFromUsers_Handler,
		},
		{
			MethodName: "updateUser",
			Handler:    _Mutation_UpdateUser_Handler,
		},
		{
			MethodName: "updateRole",
			Handler:    _Mutation_UpdateRole_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _Mutation_DeleteUser_Handler,
		},
		{
			MethodName: "deleteRole",
			Handler:    _Mutation_DeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cerbero.proto",
}
